/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package booksort;

import static booksort.Sorting.bookList;
import static booksort.Sorting.userList;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Caleb
 */
public class UserPanel extends javax.swing.JFrame {

    /**
     * Creates new form UserPanel
     */
    public UserPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        userSearch = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        userBookList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/booksort/searchLight.png"))); // NOI18N
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButtonMouseClicked(evt);
            }
        });
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Users", "ID", "Currently checked out books"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userTable.getTableHeader().setReorderingAllowed(false);
        try {
            FileReader freader = new FileReader("users.txt");
            BufferedReader reader = new BufferedReader(freader);
            userList.clear();
            String tmpString = "";
            while (tmpString != null) {
                tmpString = reader.readLine();
                if (tmpString != null){
                    String[] tmpStrArr = tmpString.replace("[", "").replace("]", "").split(", ");
                    userList.add(tmpStrArr);
                }
            }
            reader.close();
            tmpString = "";

            for(int i = 0; i < userList.size(); i++){
                System.out.println("Array: " + Arrays.toString(userList.get(i)));
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        DefaultTableModel model = (DefaultTableModel)userTable.getModel();
        model.setRowCount(0);
        for (int i = 0; i < userList.size(); i++){
            if ((userList.get(i)[0].toLowerCase().contains(userSearch.getText().toLowerCase()) || userSearch.getText().compareTo("") == 0)){
                int howManyBooks = 0;
                for(int j = 5; j < userList.get(i).length; j++){
                    howManyBooks++;
                }
                String tmpString = "";
                String tmpName = "";
                int tmpInt = 0;
                if (userList.get(i).length > 4){
                    while(!tmpString.contains("/")){
                        System.out.println(tmpString);
                        tmpName = tmpName + userList.get(i)[4].charAt(tmpInt++);
                        tmpString = Character.toString(userList.get(i)[4].charAt(tmpInt));
                    }
                } else {
                    tmpName = userList.get(i)[0];
                }
                Object[] tmpArr = {tmpName, userList.get(i)[3], howManyBooks};
                model.addRow(tmpArr);
                userList.get(i);
            }
        }
        userTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(userTable);
        if (userTable.getColumnModel().getColumnCount() > 0) {
            userTable.getColumnModel().getColumn(0).setResizable(false);
            userTable.getColumnModel().getColumn(1).setResizable(false);
            userTable.getColumnModel().getColumn(1).setPreferredWidth(20);
            userTable.getColumnModel().getColumn(2).setResizable(false);
            userTable.getColumnModel().getColumn(2).setPreferredWidth(150);
        }

        userSearch.setText("jTextField1");

        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/booksort/searchLight.png"))); // NOI18N
        searchButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButton1MouseClicked(evt);
            }
        });
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });

        userBookList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "1", "2", "3" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(userBookList);

        jLabel1.setText("Books");

        jButton1.setText("Return Selected Book");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jLabel1))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(searchButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
        
    }//GEN-LAST:event_searchButtonMouseClicked

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButton1MouseClicked
        try {
            FileReader freader = new FileReader("users.txt");
            BufferedReader reader = new BufferedReader(freader);
            userList.clear();
            String tmpString = "";
            while (tmpString != null) {
                tmpString = reader.readLine();
                if (tmpString != null){
                    String[] tmpStrArr = tmpString.replace("[", "").replace("]", "").split(", ");
                    userList.add(tmpStrArr);
                }
            }
            reader.close();
            tmpString = "";
            
            for(int i = 0; i < userList.size(); i++){
                System.out.println("Array: " + Arrays.toString(userList.get(i)));
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        DefaultTableModel model = (DefaultTableModel)userTable.getModel();
        model.setRowCount(0);
        for (int i = 0; i < userList.size(); i++){
            String tmpName4Loop = "lorem ipsum";
            if (userList.get(i).length > 4){
                String tmpString = "";
                String tmpName = "";
                int tmpInt = 0;
                while(!tmpString.contains("/")){
                    System.out.println(tmpString);
                    tmpName = tmpName + userList.get(i)[4].charAt(tmpInt++);
                    tmpString = Character.toString(userList.get(i)[4].charAt(tmpInt));
                }
                tmpName4Loop = tmpName;
            }
            System.out.println(tmpName4Loop);
            System.out.println("if " + userList.get(i)[4].toLowerCase() + tmpName4Loop);
            if ((userList.get(i)[0].toLowerCase().contains(userSearch.getText().toLowerCase()) || userSearch.getText().compareTo("") == 0 || tmpName4Loop.toLowerCase().contains(userSearch.getText().toLowerCase()))){
                System.out.println("true");
                int howManyBooks = 0;
                for(int j = 5; j < userList.get(i).length; j++){
                    howManyBooks++;
                }
                String tmpString = "";
                String tmpName = "";
                int tmpInt = 0;
                if (userList.get(i).length > 4){
                    while(!tmpString.contains("/")){
                        System.out.println(tmpString);
                        tmpName = tmpName + userList.get(i)[4].charAt(tmpInt++);
                        tmpString = Character.toString(userList.get(i)[4].charAt(tmpInt));
                    }
                } else {
                    tmpName = userList.get(i)[0];
                }
                Object[] tmpArr = {tmpName, userList.get(i)[3], howManyBooks};
                model.addRow(tmpArr);
                userList.get(i);
            }
        }
    }//GEN-LAST:event_searchButton1MouseClicked

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void userTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userTableMouseClicked
        ArrayList<String> tmpArrList = new ArrayList<String>();
        
        for (int i = 0; i < userList.size(); i++){
            System.out.println("if " + userList.get(i)[3] + " == " + userTable.getModel().getValueAt(userTable.getSelectedRow(), 1));
            if(userList.get(i)[3] == userTable.getModel().getValueAt(userTable.getSelectedRow(), 1)){
                System.out.println("got 1");
                for(int j = 5; j < userList.get(i).length; j++){
                    System.out.println("got here");
                    for(int h = 0; h < bookList.size(); h++){
                        System.out.println("if " + bookList.get(h)[5] + " == " + userList.get(i)[j]);
                        if (Integer.valueOf(bookList.get(h)[5]) == Integer.valueOf(userList.get(i)[j])){
                            tmpArrList.add(bookList.get(h)[0]);
                            System.out.println("adding");
                        }
                    }
                }
            }
        }
        
        System.out.println(tmpArrList);
        
        String[] tmpStrArr = ArrayListConvert.toStringArray(tmpArrList);
        
        userBookList.setListData(tmpStrArr);
        
    }//GEN-LAST:event_userTableMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        for(int i = 0; i < bookList.size(); i++){
            if(bookList.get(i)[0].contains(userBookList.getSelectedValue())){
                String[] tmpStrArr = {"","","","","",""};
                for(int h = 0; h < bookList.get(i).length; h++){
                    if(h != 4){
                        tmpStrArr[h] = bookList.get(i)[h];
                    } else {
                        tmpStrArr[h] = "true";
                    }
                }
                
            }
        }
        
        try {
                File booksFile = new File("books.txt");
                booksFile.delete();
                OutputStreamWriter osWriter = new OutputStreamWriter(new FileOutputStream("books.txt"), "UTF-8");
                BufferedWriter bWriter = new BufferedWriter(osWriter);
                for(String[] str: bookList) {
                    bWriter.write(Arrays.toString(str) + System.lineSeparator());
                }
                bWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(NewGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JList<String> userBookList;
    private javax.swing.JTextField userSearch;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
