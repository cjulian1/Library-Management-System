/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package booksort;

import static booksort.Sorting.bookList;
import static booksort.Sorting.userList;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Caleb
 */
public class CheckOut extends javax.swing.JFrame {

    private static String title2;
    private static int ID2;

    /**
     * Creates new form CheckOut
     */
    public CheckOut(String title1, int ID1) {
        CheckOut.title2 = title1;
        CheckOut.ID2 = ID1;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        checkOutButton = new javax.swing.JButton();
        bookTitleField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Users", "ID"
            }
        ));
        DefaultTableModel model = (DefaultTableModel)userTable.getModel();
        model.setRowCount(0);
        for (int i = 0; i < userList.size(); i++){
            userList.get(i);
            Object[] tmpArr = {userList.get(i)[0], userList.get(i)[3]};
            model.addRow(tmpArr);
            userList.get(i);
        }
        jScrollPane1.setViewportView(userTable);

        checkOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/booksort/checkoutLight.png"))); // NOI18N
        checkOutButton.setText("Check out");
        checkOutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkOutButtonMouseClicked(evt);
            }
        });
        checkOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutButtonActionPerformed(evt);
            }
        });

        bookTitleField.setText("book title");
        bookTitleField.setToolTipText("Book Title");
        bookTitleField.setEditable(false);  bookTitleField.setText(CheckOut.title2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                    .addComponent(bookTitleField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 182, Short.MAX_VALUE)
                        .addComponent(bookTitleField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkOutButtonActionPerformed

    private void checkOutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkOutButtonMouseClicked
        try {
            FileReader freader = new FileReader("users.txt");
            BufferedReader reader = new BufferedReader(freader);
            userList.clear();
            String tmpString = "";
            while (tmpString != null) {
                tmpString = reader.readLine();
                if (tmpString != null){
                    String[] tmpStrArr = tmpString.replace("[", "").replace("]", "").split(", ");
                    userList.add(tmpStrArr);
                }
            }
            reader.close();
            tmpString = "";
            
            for(int i = 0; i < userList.size(); i++){
                System.out.println("Array: " + Arrays.toString(userList.get(i)));
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        try {
            int tmpID = Integer.valueOf(String.valueOf(userTable.getValueAt(userTable.getSelectedRow(), 1)));
            File usersFile = new File("users.txt");
            usersFile.delete();
            OutputStreamWriter osWriter = new OutputStreamWriter(new FileOutputStream("users.txt"), "UTF-8");
            osWriter = new OutputStreamWriter(new FileOutputStream("users.txt"), "UTF-8");
            BufferedWriter bWriter = new BufferedWriter(osWriter);
            for (int i = 0; i < userList.size(); i++){
                int check = 0;
                if (userList.get(i).length > 5){
                    for(int j = 5; j < userList.get(i).length; j++){
                        if(Integer.parseInt(userList.get(i)[j]) == ID2){
                            check = 1;
                        }
                    }
                }
                if (Integer.parseInt(userList.get(i)[3]) == tmpID && check == 0){
                    System.out.println("running if");
                    bWriter.write("[");
                    for (int h = 0; h < userList.get(i).length; h++){
                        bWriter.write(userList.get(i)[h] + ", ");
                    }
                    bWriter.write(ID2 + "]");
                    bWriter.write(System.lineSeparator());
                } else {
                    System.out.println("running else");
                    bWriter.write("[");
                    for (int h = 0; h < userList.get(i).length; h++){
                        if(h + 1 != userList.get(i).length){
                            System.out.println(h + " + 1 != " + userList.get(i).length);
                            bWriter.write(userList.get(i)[h] + ", ");
                        } else {
                            bWriter.write(userList.get(i)[h]);
                        }
                    }
                    bWriter.write("]");
                    bWriter.write(System.lineSeparator());
                }
            }
            bWriter.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(CheckOut.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(CheckOut.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CheckOut.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            FileReader freader = new FileReader("users.txt");
            BufferedReader reader = new BufferedReader(freader);
            userList.clear();
            String tmpString = "";
            while (tmpString != null) {
                tmpString = reader.readLine();
                if (tmpString != null){
                    String[] tmpStrArr = tmpString.replace("[", "").replace("]", "").split(", ");
                    userList.add(tmpStrArr);
                }
            }
            reader.close();
            tmpString = "";
            
            for(int i = 0; i < userList.size(); i++){
                System.out.println("Array: " + Arrays.toString(userList.get(i)));
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        for(int i = 0; i < bookList.size(); i++){
            if(bookList.get(i)[0].contains(bookTitleField.getText())){
                String[] tmpStrArr = {"","","","","",""};
                for(int h = 0; h < bookList.get(i).length; h++){
                    if(h != 4){
                        tmpStrArr[h] = bookList.get(i)[h];
                        System.out.println("adding " + bookList.get(i)[h]);
                    } else {
                        tmpStrArr[h] = "false";
                        System.out.println("set to false");
                    }
                    System.out.println(Arrays.toString(tmpStrArr));
                //bookList.set(i, tmpStrArr);
                }
            }
        }
        
        try {
                File booksFile = new File("books.txt");
                booksFile.delete();
                OutputStreamWriter osWriter = new OutputStreamWriter(new FileOutputStream("books.txt"), "UTF-8");
                BufferedWriter bWriter = new BufferedWriter(osWriter);
                for(String[] str: bookList) {
                    bWriter.write(Arrays.toString(str) + System.lineSeparator());
                }
                bWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(NewGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        this.dispose();
    }//GEN-LAST:event_checkOutButtonMouseClicked

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        
    }//GEN-LAST:event_formFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckOut(title2, ID2).setVisible(true);
            }
        });
    }
    
    public void Close(){
        getParent().setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bookTitleField;
    private javax.swing.JButton checkOutButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
